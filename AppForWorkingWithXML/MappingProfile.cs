using AutoMapper;


namespace AppForWorkingWithXML
{
    public class MappingProfile : Profile
    {
        public MappingProfile()
        {
            CreateMap<Models.Entities.AddressObjectsObject, Models.Dto.ADDRESSOBJECTSOBJECT>().ReverseMap()
                 .ForMember(nameof(Models.Entities.AddressObjectsObject.Id), opt => opt.MapFrom(n => n.ID))
                 .ForMember(nameof(Models.Entities.AddressObjectsObject.ObjectId), opt => opt.MapFrom(n => n.OBJECTID))
                 .ForMember(nameof(Models.Entities.AddressObjectsObject.ObjectGuid), opt => opt.MapFrom(n => n.OBJECTGUID))
                 .ForMember(nameof(Models.Entities.AddressObjectsObject.ChangeId), opt => opt.MapFrom(n => n.CHANGEID))
                 .ForMember(nameof(Models.Entities.AddressObjectsObject.Name), opt => opt.MapFrom(n => n.NAME))
                 .ForMember(nameof(Models.Entities.AddressObjectsObject.TypeName), opt => opt.MapFrom(n => n.TYPENAME))
                 .ForMember(nameof(Models.Entities.AddressObjectsObject.Level), opt => opt.MapFrom(n => n.LEVEL))
                 .ForMember(nameof(Models.Entities.AddressObjectsObject.OperTypeId), opt => opt.MapFrom(n => n.OPERTYPEID))
                 .ForMember(nameof(Models.Entities.AddressObjectsObject.PrevId), opt => opt.MapFrom(n => n.PREVID))
                 .ForMember(nameof(Models.Entities.AddressObjectsObject.PrevIdSpecified), opt => opt.MapFrom(n => n.PREVIDSpecified))
                 .ForMember(nameof(Models.Entities.AddressObjectsObject.NextId), opt => opt.MapFrom(n => n.NEXTID))
                 .ForMember(nameof(Models.Entities.AddressObjectsObject.NextIdSpecified), opt => opt.MapFrom(n => n.NEXTIDSpecified))
                 .ForMember(nameof(Models.Entities.AddressObjectsObject.UpdateDate), opt => opt.MapFrom(n => n.UPDATEDATE))
                 .ForMember(nameof(Models.Entities.AddressObjectsObject.StartDate), opt => opt.MapFrom(n => n.STARTDATE))
                 .ForMember(nameof(Models.Entities.AddressObjectsObject.EndDate), opt => opt.MapFrom(n => n.ENDDATE))
                 .ForMember(nameof(Models.Entities.AddressObjectsObject.IsActual), opt => opt.MapFrom(n => n.ISACTUAL))
                 .ForMember(nameof(Models.Entities.AddressObjectsObject.IsActive), opt => opt.MapFrom(n => n.ISACTIVE));

            CreateMap<Models.Entities.AsAddrObjDivisionItemsItem, Models.Dto.ITEM>().ReverseMap()
                 .ForMember(nameof(Models.Entities.AsAddrObjDivisionItemsItem.Id), opt => opt.MapFrom(n => n.ID))
                 .ForMember(nameof(Models.Entities.AsAddrObjDivisionItemsItem.ParentId), opt => opt.MapFrom(n => n.PARENTID))
                 .ForMember(nameof(Models.Entities.AsAddrObjDivisionItemsItem.ChildId), opt => opt.MapFrom(n => n.CHILDID))
                 .ForMember(nameof(Models.Entities.AsAddrObjDivisionItemsItem.ChangeId), opt => opt.MapFrom(n => n.CHANGEID));

            CreateMap<Models.Entities.AddressObjectTypesAddressObjectType, Models.Dto.ADDRESSOBJECTTYPE>().ReverseMap()
                 .ForMember(nameof(Models.Entities.AddressObjectTypesAddressObjectType.Id), opt => opt.MapFrom(n => n.ID))
                 .ForMember(nameof(Models.Entities.AddressObjectTypesAddressObjectType.Level), opt => opt.MapFrom(n => n.LEVEL))
                 .ForMember(nameof(Models.Entities.AddressObjectTypesAddressObjectType.ShortName), opt => opt.MapFrom(n => n.SHORTNAME))
                 .ForMember(nameof(Models.Entities.AddressObjectTypesAddressObjectType.Name), opt => opt.MapFrom(n => n.NAME))
                 .ForMember(nameof(Models.Entities.AddressObjectTypesAddressObjectType.Desc), opt => opt.MapFrom(n => n.DESC))
                 .ForMember(nameof(Models.Entities.AddressObjectTypesAddressObjectType.UpdateDate), opt => opt.MapFrom(n => n.UPDATEDATE))
                 .ForMember(nameof(Models.Entities.AddressObjectTypesAddressObjectType.StartDate), opt => opt.MapFrom(n => n.STARTDATE))
                 .ForMember(nameof(Models.Entities.AddressObjectTypesAddressObjectType.EndDate), opt => opt.MapFrom(n => n.ENDDATE))
                 .ForMember(nameof(Models.Entities.AddressObjectTypesAddressObjectType.IsActive), opt => opt.MapFrom(n => n.ISACTIVE));

            CreateMap<Models.Entities.AsAdmHierarchyItemsItem, Models.Dto.AsAdmHierarchy.ITEM>().ReverseMap()
                 .ForMember(nameof(Models.Entities.AsAdmHierarchyItemsItem.Id), opt => opt.MapFrom(n => n.ID))
                 .ForMember(nameof(Models.Entities.AsAdmHierarchyItemsItem.ObjectId), opt => opt.MapFrom(n => n.OBJECTID))
                 .ForMember(nameof(Models.Entities.AsAdmHierarchyItemsItem.ParentObjId), opt => opt.MapFrom(n => n.PARENTOBJID))
                 .ForMember(nameof(Models.Entities.AsAdmHierarchyItemsItem.ParentObjIdSpecified), opt => opt.MapFrom(n => n.PARENTOBJIDSpecified))
                 .ForMember(nameof(Models.Entities.AsAdmHierarchyItemsItem.ChangeId), opt => opt.MapFrom(n => n.CHANGEID))
                 .ForMember(nameof(Models.Entities.AsAdmHierarchyItemsItem.RegionCode), opt => opt.MapFrom(n => n.REGIONCODE))
                 .ForMember(nameof(Models.Entities.AsAdmHierarchyItemsItem.AreaCode), opt => opt.MapFrom(n => n.AREACODE))
                 .ForMember(nameof(Models.Entities.AsAdmHierarchyItemsItem.CityCode), opt => opt.MapFrom(n => n.CITYCODE))
                 .ForMember(nameof(Models.Entities.AsAdmHierarchyItemsItem.PlaceCode), opt => opt.MapFrom(n => n.PLACECODE))
                 .ForMember(nameof(Models.Entities.AsAdmHierarchyItemsItem.PlanCode), opt => opt.MapFrom(n => n.PLANCODE))
                 .ForMember(nameof(Models.Entities.AsAdmHierarchyItemsItem.StreetCode), opt => opt.MapFrom(n => n.STREETCODE))
                 .ForMember(nameof(Models.Entities.AsAdmHierarchyItemsItem.PrevId), opt => opt.MapFrom(n => n.PREVID))
                 .ForMember(nameof(Models.Entities.AsAdmHierarchyItemsItem.PrevIdSpecified), opt => opt.MapFrom(n => n.PREVIDSpecified))
                 .ForMember(nameof(Models.Entities.AsAdmHierarchyItemsItem.NextId), opt => opt.MapFrom(n => n.NEXTID))
                 .ForMember(nameof(Models.Entities.AsAdmHierarchyItemsItem.NextIdSpecified), opt => opt.MapFrom(n => n.NEXTIDSpecified))
                 .ForMember(nameof(Models.Entities.AsAdmHierarchyItemsItem.UpdateDate), opt => opt.MapFrom(n => n.UPDATEDATE))
                 .ForMember(nameof(Models.Entities.AsAdmHierarchyItemsItem.StartDate), opt => opt.MapFrom(n => n.STARTDATE))
                 .ForMember(nameof(Models.Entities.AsAdmHierarchyItemsItem.EndDate), opt => opt.MapFrom(n => n.ENDDATE))
                 .ForMember(nameof(Models.Entities.AsAdmHierarchyItemsItem.IsActive), opt => opt.MapFrom(n => n.ISACTIVE))
                 .ForMember(nameof(Models.Entities.AsAdmHierarchyItemsItem.Path), opt => opt.MapFrom(n => n.PATH));

            CreateMap<Models.Entities.ApartmentsApartment, Models.Dto.APARTMENT>().ReverseMap()
                 .ForMember(nameof(Models.Entities.ApartmentsApartment.Id), opt => opt.MapFrom(n => n.ID))
                 .ForMember(nameof(Models.Entities.ApartmentsApartment.ObjectId), opt => opt.MapFrom(n => n.OBJECTID))
                 .ForMember(nameof(Models.Entities.ApartmentsApartment.ObjectGuid), opt => opt.MapFrom(n => n.OBJECTGUID))
                 .ForMember(nameof(Models.Entities.ApartmentsApartment.ChangeId), opt => opt.MapFrom(n => n.CHANGEID))
                 .ForMember(nameof(Models.Entities.ApartmentsApartment.Number), opt => opt.MapFrom(n => n.NUMBER))
                 .ForMember(nameof(Models.Entities.ApartmentsApartment.ApartType), opt => opt.MapFrom(n => n.APARTTYPE))
                 .ForMember(nameof(Models.Entities.ApartmentsApartment.OperTypeId), opt => opt.MapFrom(n => n.OPERTYPEID))
                 .ForMember(nameof(Models.Entities.ApartmentsApartment.PrevId), opt => opt.MapFrom(n => n.PREVID))
                 .ForMember(nameof(Models.Entities.ApartmentsApartment.PrevIdSpecified), opt => opt.MapFrom(n => n.PREVIDSpecified))
                 .ForMember(nameof(Models.Entities.ApartmentsApartment.NextId), opt => opt.MapFrom(n => n.NEXTID))
                 .ForMember(nameof(Models.Entities.ApartmentsApartment.NextIdSpecified), opt => opt.MapFrom(n => n.NEXTIDSpecified))
                 .ForMember(nameof(Models.Entities.ApartmentsApartment.UpdateDate), opt => opt.MapFrom(n => n.UPDATEDATE))
                 .ForMember(nameof(Models.Entities.ApartmentsApartment.StartDate), opt => opt.MapFrom(n => n.STARTDATE))
                 .ForMember(nameof(Models.Entities.ApartmentsApartment.EndDate), opt => opt.MapFrom(n => n.ENDDATE))
                 .ForMember(nameof(Models.Entities.ApartmentsApartment.IsActual), opt => opt.MapFrom(n => n.ISACTUAL))
                 .ForMember(nameof(Models.Entities.ApartmentsApartment.IsActive), opt => opt.MapFrom(n => n.ISACTIVE));

            CreateMap<Models.Entities.ApartmentTypesApartmentType, Models.Dto.APARTMENTTYPE>().ReverseMap()
                 .ForMember(nameof(Models.Entities.ApartmentTypesApartmentType.Id), opt => opt.MapFrom(n => n.ID))
                 .ForMember(nameof(Models.Entities.ApartmentTypesApartmentType.Name), opt => opt.MapFrom(n => n.NAME))
                 .ForMember(nameof(Models.Entities.ApartmentTypesApartmentType.ShortName), opt => opt.MapFrom(n => n.SHORTNAME))
                 .ForMember(nameof(Models.Entities.ApartmentTypesApartmentType.Desc), opt => opt.MapFrom(n => n.DESC))
                 .ForMember(nameof(Models.Entities.ApartmentTypesApartmentType.UpdateDate), opt => opt.MapFrom(n => n.UPDATEDATE))
                 .ForMember(nameof(Models.Entities.ApartmentTypesApartmentType.StartDate), opt => opt.MapFrom(n => n.STARTDATE))
                 .ForMember(nameof(Models.Entities.ApartmentTypesApartmentType.EndDate), opt => opt.MapFrom(n => n.ENDDATE))
                 .ForMember(nameof(Models.Entities.ApartmentTypesApartmentType.IsActive), opt => opt.MapFrom(n => n.ISACTIVE));

            CreateMap<Models.Entities.CarplacesCarplace, Models.Dto.CARPLACE>().ReverseMap()
                 .ForMember(nameof(Models.Entities.CarplacesCarplace.Id), opt => opt.MapFrom(n => n.ID))
                 .ForMember(nameof(Models.Entities.CarplacesCarplace.ObjectId), opt => opt.MapFrom(n => n.OBJECTID))
                 .ForMember(nameof(Models.Entities.CarplacesCarplace.ObjectGuid), opt => opt.MapFrom(n => n.OBJECTGUID))
                 .ForMember(nameof(Models.Entities.CarplacesCarplace.ChangeId), opt => opt.MapFrom(n => n.CHANGEID))
                 .ForMember(nameof(Models.Entities.CarplacesCarplace.Number), opt => opt.MapFrom(n => n.NUMBER))
                 .ForMember(nameof(Models.Entities.CarplacesCarplace.OperTypeId), opt => opt.MapFrom(n => n.OPERTYPEID))
                 .ForMember(nameof(Models.Entities.CarplacesCarplace.PrevId), opt => opt.MapFrom(n => n.PREVID))
                 .ForMember(nameof(Models.Entities.CarplacesCarplace.PrevIdSpecified), opt => opt.MapFrom(n => n.PREVIDSpecified))
                 .ForMember(nameof(Models.Entities.CarplacesCarplace.NextId), opt => opt.MapFrom(n => n.NEXTID))
                 .ForMember(nameof(Models.Entities.CarplacesCarplace.NextIdSpecified), opt => opt.MapFrom(n => n.NEXTIDSpecified))
                 .ForMember(nameof(Models.Entities.CarplacesCarplace.UpdateDate), opt => opt.MapFrom(n => n.UPDATEDATE))
                 .ForMember(nameof(Models.Entities.CarplacesCarplace.StartDate), opt => opt.MapFrom(n => n.STARTDATE))
                 .ForMember(nameof(Models.Entities.CarplacesCarplace.EndDate), opt => opt.MapFrom(n => n.ENDDATE))
                 .ForMember(nameof(Models.Entities.CarplacesCarplace.IsActual), opt => opt.MapFrom(n => n.ISACTUAL))
                 .ForMember(nameof(Models.Entities.CarplacesCarplace.IsActive), opt => opt.MapFrom(n => n.ISACTIVE));

            CreateMap<Models.Entities.AsChangeHistoryItemsItem, Models.Dto.AsChangeHistory.ITEM>().ReverseMap()
                 .ForMember(nameof(Models.Entities.AsChangeHistoryItemsItem.Id), opt => opt.Ignore())
                 .ForMember(nameof(Models.Entities.AsChangeHistoryItemsItem.ChangeId), opt => opt.MapFrom(n => n.CHANGEID))
                 .ForMember(nameof(Models.Entities.AsChangeHistoryItemsItem.ObjectId), opt => opt.MapFrom(n => n.OBJECTID))
                 .ForMember(nameof(Models.Entities.AsChangeHistoryItemsItem.AdrObjectId), opt => opt.MapFrom(n => n.ADROBJECTID))
                 .ForMember(nameof(Models.Entities.AsChangeHistoryItemsItem.OperTypeId), opt => opt.MapFrom(n => n.OPERTYPEID))
                 .ForMember(nameof(Models.Entities.AsChangeHistoryItemsItem.NDocId), opt => opt.MapFrom(n => n.NDOCID))
                 .ForMember(nameof(Models.Entities.AsChangeHistoryItemsItem.NDocIdSpecified), opt => opt.MapFrom(n => n.NDOCIDSpecified))
                 .ForMember(nameof(Models.Entities.AsChangeHistoryItemsItem.ChangeDate), opt => opt.MapFrom(n => n.CHANGEDATE));

            CreateMap<Models.Entities.HousesHouse, Models.Dto.HOUSE>().ReverseMap()
                 .ForMember(nameof(Models.Entities.HousesHouse.Id), opt => opt.MapFrom(n => n.ID))
                 .ForMember(nameof(Models.Entities.HousesHouse.ObjectId), opt => opt.MapFrom(n => n.OBJECTID))
                 .ForMember(nameof(Models.Entities.HousesHouse.ObjectGuid), opt => opt.MapFrom(n => n.OBJECTGUID))
                 .ForMember(nameof(Models.Entities.HousesHouse.ChangeId), opt => opt.MapFrom(n => n.CHANGEID))
                 .ForMember(nameof(Models.Entities.HousesHouse.HouseNum), opt => opt.MapFrom(n => n.HOUSENUM))
                 .ForMember(nameof(Models.Entities.HousesHouse.AddNum1), opt => opt.MapFrom(n => n.ADDNUM1))
                 .ForMember(nameof(Models.Entities.HousesHouse.AddNum2), opt => opt.MapFrom(n => n.ADDNUM2))
                 .ForMember(nameof(Models.Entities.HousesHouse.HouseType), opt => opt.MapFrom(n => n.HOUSETYPE))
                 .ForMember(nameof(Models.Entities.HousesHouse.AddType1), opt => opt.MapFrom(n => n.ADDTYPE1))
                 .ForMember(nameof(Models.Entities.HousesHouse.AddType2), opt => opt.MapFrom(n => n.ADDTYPE2))
                 .ForMember(nameof(Models.Entities.HousesHouse.OperTypeId), opt => opt.MapFrom(n => n.OPERTYPEID))
                 .ForMember(nameof(Models.Entities.HousesHouse.PrevId), opt => opt.MapFrom(n => n.PREVID))
                 .ForMember(nameof(Models.Entities.HousesHouse.PrevIdSpecified), opt => opt.MapFrom(n => n.PREVIDSpecified))
                 .ForMember(nameof(Models.Entities.HousesHouse.NextId), opt => opt.MapFrom(n => n.NEXTID))
                 .ForMember(nameof(Models.Entities.HousesHouse.NextIdSpecified), opt => opt.MapFrom(n => n.NEXTIDSpecified))
                 .ForMember(nameof(Models.Entities.HousesHouse.UpdateDate), opt => opt.MapFrom(n => n.UPDATEDATE))
                 .ForMember(nameof(Models.Entities.HousesHouse.StartDate), opt => opt.MapFrom(n => n.STARTDATE))
                 .ForMember(nameof(Models.Entities.HousesHouse.EndDate), opt => opt.MapFrom(n => n.ENDDATE))
                 .ForMember(nameof(Models.Entities.HousesHouse.IsActual), opt => opt.MapFrom(n => n.ISACTUAL))
                 .ForMember(nameof(Models.Entities.HousesHouse.IsActive), opt => opt.MapFrom(n => n.ISACTIVE));

            CreateMap<Models.Entities.HouseTypesHouseType, Models.Dto.HOUSETYPE>().ReverseMap()
                 .ForMember(nameof(Models.Entities.HouseTypesHouseType.Id), opt => opt.MapFrom(n => n.ID))
                 .ForMember(nameof(Models.Entities.HouseTypesHouseType.Name), opt => opt.MapFrom(n => n.NAME))
                 .ForMember(nameof(Models.Entities.HouseTypesHouseType.ShortName), opt => opt.MapFrom(n => n.SHORTNAME))
                 .ForMember(nameof(Models.Entities.HouseTypesHouseType.Desc), opt => opt.MapFrom(n => n.DESC))
                 .ForMember(nameof(Models.Entities.HouseTypesHouseType.UpdateDate), opt => opt.MapFrom(n => n.UPDATEDATE))
                 .ForMember(nameof(Models.Entities.HouseTypesHouseType.StartDate), opt => opt.MapFrom(n => n.STARTDATE))
                 .ForMember(nameof(Models.Entities.HouseTypesHouseType.EndDate), opt => opt.MapFrom(n => n.ENDDATE))
                 .ForMember(nameof(Models.Entities.HouseTypesHouseType.IsActive), opt => opt.MapFrom(n => n.ISACTIVE));

            CreateMap<Models.Entities.AsMunHierarchyItemsItem, Models.Dto.AsMunHierarchy.ITEM>().ReverseMap()
                 .ForMember(nameof(Models.Entities.AsMunHierarchyItemsItem.Id), opt => opt.MapFrom(n => n.ID))
                 .ForMember(nameof(Models.Entities.AsMunHierarchyItemsItem.ObjectId), opt => opt.MapFrom(n => n.OBJECTID))
                 .ForMember(nameof(Models.Entities.AsMunHierarchyItemsItem.ParentObjId), opt => opt.MapFrom(n => n.PARENTOBJID))
                 .ForMember(nameof(Models.Entities.AsMunHierarchyItemsItem.ParentObjIdSpecified), opt => opt.MapFrom(n => n.PARENTOBJIDSpecified))
                 .ForMember(nameof(Models.Entities.AsMunHierarchyItemsItem.ChangeId), opt => opt.MapFrom(n => n.CHANGEID))
                 .ForMember(nameof(Models.Entities.AsMunHierarchyItemsItem.Oktmo), opt => opt.MapFrom(n => n.OKTMO))
                 .ForMember(nameof(Models.Entities.AsMunHierarchyItemsItem.PrevId), opt => opt.MapFrom(n => n.PREVID))
                 .ForMember(nameof(Models.Entities.AsMunHierarchyItemsItem.ParentObjIdSpecified), opt => opt.MapFrom(n => n.PREVIDSpecified))
                 .ForMember(nameof(Models.Entities.AsMunHierarchyItemsItem.NextId), opt => opt.MapFrom(n => n.NEXTID))
                 .ForMember(nameof(Models.Entities.AsMunHierarchyItemsItem.NextIdSpecified), opt => opt.MapFrom(n => n.NEXTIDSpecified))
                 .ForMember(nameof(Models.Entities.AsMunHierarchyItemsItem.UpdateDate), opt => opt.MapFrom(n => n.UPDATEDATE))
                 .ForMember(nameof(Models.Entities.AsMunHierarchyItemsItem.StartDate), opt => opt.MapFrom(n => n.STARTDATE))
                 .ForMember(nameof(Models.Entities.AsMunHierarchyItemsItem.EndDate), opt => opt.MapFrom(n => n.ENDDATE))
                 .ForMember(nameof(Models.Entities.AsMunHierarchyItemsItem.IsActive), opt => opt.MapFrom(n => n.ISACTIVE))
                 .ForMember(nameof(Models.Entities.AsMunHierarchyItemsItem.Path), opt => opt.MapFrom(n => n.PATH));

            CreateMap<Models.Entities.NormativeDocsNormativeDoc, Models.Dto.NORMDOC>().ReverseMap()
                 .ForMember(nameof(Models.Entities.NormativeDocsNormativeDoc.Id), opt => opt.MapFrom(n => n.ID))
                 .ForMember(nameof(Models.Entities.NormativeDocsNormativeDoc.Name), opt => opt.MapFrom(n => n.NAME))
                 .ForMember(nameof(Models.Entities.NormativeDocsNormativeDoc.Date), opt => opt.MapFrom(n => n.DATE))
                 .ForMember(nameof(Models.Entities.NormativeDocsNormativeDoc.Number), opt => opt.MapFrom(n => n.NUMBER))
                 .ForMember(nameof(Models.Entities.NormativeDocsNormativeDoc.Type), opt => opt.MapFrom(n => n.TYPE))
                 .ForMember(nameof(Models.Entities.NormativeDocsNormativeDoc.Kind), opt => opt.MapFrom(n => n.KIND))
                 .ForMember(nameof(Models.Entities.NormativeDocsNormativeDoc.UpdateDate), opt => opt.MapFrom(n => n.UPDATEDATE))
                 .ForMember(nameof(Models.Entities.NormativeDocsNormativeDoc.OrgName), opt => opt.MapFrom(n => n.ORGNAME))
                 .ForMember(nameof(Models.Entities.NormativeDocsNormativeDoc.RegNum), opt => opt.MapFrom(n => n.REGNUM))
                 .ForMember(nameof(Models.Entities.NormativeDocsNormativeDoc.RegDate), opt => opt.MapFrom(n => n.REGDATE))
                 .ForMember(nameof(Models.Entities.NormativeDocsNormativeDoc.RegDateSpecified), opt => opt.MapFrom(n => n.REGDATESpecified))
                 .ForMember(nameof(Models.Entities.NormativeDocsNormativeDoc.AccDate), opt => opt.MapFrom(n => n.ACCDATE))
                 .ForMember(nameof(Models.Entities.NormativeDocsNormativeDoc.AccDateSpecified), opt => opt.MapFrom(n => n.ACCDATESpecified))
                 .ForMember(nameof(Models.Entities.NormativeDocsNormativeDoc.Comment), opt => opt.MapFrom(n => n.COMMENT));

            CreateMap<Models.Entities.NormativeDocsKind, Models.Dto.NDOCKIND>().ReverseMap()
                 .ForMember(nameof(Models.Entities.NormativeDocsKind.Id), opt => opt.MapFrom(n => n.ID))
                 .ForMember(nameof(Models.Entities.NormativeDocsKind.Name), opt => opt.MapFrom(n => n.NAME));

            CreateMap<Models.Entities.NormativeDocsType, Models.Dto.NDOCTYPE>().ReverseMap()
                 .ForMember(nameof(Models.Entities.NormativeDocsType.Id), opt => opt.MapFrom(n => n.ID))
                 .ForMember(nameof(Models.Entities.NormativeDocsType.Name), opt => opt.MapFrom(n => n.NAME))
                 .ForMember(nameof(Models.Entities.NormativeDocsType.StartDate), opt => opt.MapFrom(n => n.STARTDATE))
                 .ForMember(nameof(Models.Entities.NormativeDocsType.EndDate), opt => opt.MapFrom(n => n.ENDDATE));

            CreateMap<Models.Entities.ObjectLevelsObjectLevel, Models.Dto.OBJECTLEVEL>().ReverseMap()
                 .ForMember(nameof(Models.Entities.ObjectLevelsObjectLevel.Id), opt => opt.Ignore())
                 .ForMember(nameof(Models.Entities.ObjectLevelsObjectLevel.Level), opt => opt.MapFrom(n => n.LEVEL))
                 .ForMember(nameof(Models.Entities.ObjectLevelsObjectLevel.Name), opt => opt.MapFrom(n => n.NAME))
                 .ForMember(nameof(Models.Entities.ObjectLevelsObjectLevel.ShortName), opt => opt.MapFrom(n => n.SHORTNAME))
                 .ForMember(nameof(Models.Entities.ObjectLevelsObjectLevel.UpdateDate), opt => opt.MapFrom(n => n.UPDATEDATE))
                 .ForMember(nameof(Models.Entities.ObjectLevelsObjectLevel.StartDate), opt => opt.MapFrom(n => n.STARTDATE))
                 .ForMember(nameof(Models.Entities.ObjectLevelsObjectLevel.EndDate), opt => opt.MapFrom(n => n.ENDDATE))
                 .ForMember(nameof(Models.Entities.ObjectLevelsObjectLevel.IsActive), opt => opt.MapFrom(n => n.ISACTIVE));

            CreateMap<Models.Entities.OperationTypesOperationType, Models.Dto.OPERATIONTYPE>().ReverseMap()
                 .ForMember(nameof(Models.Entities.OperationTypesOperationType.Id), opt => opt.MapFrom(n => n.ID))
                 .ForMember(nameof(Models.Entities.OperationTypesOperationType.Name), opt => opt.MapFrom(n => n.NAME))
                 .ForMember(nameof(Models.Entities.OperationTypesOperationType.ShortName), opt => opt.MapFrom(n => n.SHORTNAME))
                 .ForMember(nameof(Models.Entities.OperationTypesOperationType.Desc), opt => opt.MapFrom(n => n.DESC))
                 .ForMember(nameof(Models.Entities.OperationTypesOperationType.UpdateDate), opt => opt.MapFrom(n => n.UPDATEDATE))
                 .ForMember(nameof(Models.Entities.OperationTypesOperationType.StartDate), opt => opt.MapFrom(n => n.STARTDATE))
                 .ForMember(nameof(Models.Entities.OperationTypesOperationType.EndDate), opt => opt.MapFrom(n => n.ENDDATE))
                 .ForMember(nameof(Models.Entities.OperationTypesOperationType.IsActive), opt => opt.MapFrom(n => n.ISACTIVE));

            CreateMap<Models.Entities.ParamsParam, Models.Dto.PARAM>().ReverseMap()
                 .ForMember(nameof(Models.Entities.ParamsParam.Id), opt => opt.MapFrom(n => n.ID))
                 .ForMember(nameof(Models.Entities.ParamsParam.ObjectId), opt => opt.MapFrom(n => n.OBJECTID))
                 .ForMember(nameof(Models.Entities.ParamsParam.ChangeId), opt => opt.MapFrom(n => n.CHANGEID))
                 .ForMember(nameof(Models.Entities.ParamsParam.ChangeIdSpecified), opt => opt.MapFrom(n => n.CHANGEIDSpecified))
                 .ForMember(nameof(Models.Entities.ParamsParam.ChangeIdEnd), opt => opt.MapFrom(n => n.CHANGEIDEND))
                 .ForMember(nameof(Models.Entities.ParamsParam.TypeId), opt => opt.MapFrom(n => n.TYPEID))
                 .ForMember(nameof(Models.Entities.ParamsParam.Value), opt => opt.MapFrom(n => n.VALUE))
                 .ForMember(nameof(Models.Entities.ParamsParam.UpdateDate), opt => opt.MapFrom(n => n.UPDATEDATE))
                 .ForMember(nameof(Models.Entities.ParamsParam.StartDate), opt => opt.MapFrom(n => n.STARTDATE))
                 .ForMember(nameof(Models.Entities.ParamsParam.EndDate), opt => opt.MapFrom(n => n.ENDDATE));

            CreateMap<Models.Entities.ParamTypesParamType, Models.Dto.PARAMTYPE>().ReverseMap()
                 .ForMember(nameof(Models.Entities.ParamTypesParamType.Id), opt => opt.MapFrom(n => n.ID))
                 .ForMember(nameof(Models.Entities.ParamTypesParamType.Name), opt => opt.MapFrom(n => n.NAME))
                 .ForMember(nameof(Models.Entities.ParamTypesParamType.Code), opt => opt.MapFrom(n => n.CODE))
                 .ForMember(nameof(Models.Entities.ParamTypesParamType.Desc), opt => opt.MapFrom(n => n.DESC))
                 .ForMember(nameof(Models.Entities.ParamTypesParamType.UpdateDate), opt => opt.MapFrom(n => n.UPDATEDATE))
                 .ForMember(nameof(Models.Entities.ParamTypesParamType.StartDate), opt => opt.MapFrom(n => n.STARTDATE))
                 .ForMember(nameof(Models.Entities.ParamTypesParamType.EndDate), opt => opt.MapFrom(n => n.ENDDATE))
                 .ForMember(nameof(Models.Entities.ParamTypesParamType.IsActive), opt => opt.MapFrom(n => n.ISACTIVE));

            CreateMap<Models.Entities.ReestrObjectsObject, Models.Dto.OBJECT>().ReverseMap()
                 .ForMember(nameof(Models.Entities.ReestrObjectsObject.Id), opt => opt.Ignore())
                 .ForMember(nameof(Models.Entities.ReestrObjectsObject.ObjectId), opt => opt.MapFrom(n => n.OBJECTID))
                 .ForMember(nameof(Models.Entities.ReestrObjectsObject.CreateDate), opt => opt.MapFrom(n => n.CREATEDATE))
                 .ForMember(nameof(Models.Entities.ReestrObjectsObject.ChangeId), opt => opt.MapFrom(n => n.CHANGEID))
                 .ForMember(nameof(Models.Entities.ReestrObjectsObject.LevelId), opt => opt.MapFrom(n => n.LEVELID))
                 .ForMember(nameof(Models.Entities.ReestrObjectsObject.UpdateDate), opt => opt.MapFrom(n => n.UPDATEDATE))
                 .ForMember(nameof(Models.Entities.ReestrObjectsObject.ObjectGuid), opt => opt.MapFrom(n => n.OBJECTGUID))
                 .ForMember(nameof(Models.Entities.ReestrObjectsObject.IsActive), opt => opt.MapFrom(n => n.ISACTIVE));

            CreateMap<Models.Entities.RoomsRoom, Models.Dto.ROOM>().ReverseMap()
                 .ForMember(nameof(Models.Entities.RoomsRoom.Id), opt => opt.MapFrom(n => n.ID))
                 .ForMember(nameof(Models.Entities.RoomsRoom.ObjectId), opt => opt.MapFrom(n => n.OBJECTID))
                 .ForMember(nameof(Models.Entities.RoomsRoom.ObjectGuid), opt => opt.MapFrom(n => n.OBJECTGUID))
                 .ForMember(nameof(Models.Entities.RoomsRoom.ChangeId), opt => opt.MapFrom(n => n.CHANGEID))
                 .ForMember(nameof(Models.Entities.RoomsRoom.Number), opt => opt.MapFrom(n => n.NUMBER))
                 .ForMember(nameof(Models.Entities.RoomsRoom.RoomType), opt => opt.MapFrom(n => n.ROOMTYPE))
                 .ForMember(nameof(Models.Entities.RoomsRoom.OperTypeId), opt => opt.MapFrom(n => n.OPERTYPEID))
                 .ForMember(nameof(Models.Entities.RoomsRoom.PrevId), opt => opt.MapFrom(n => n.PREVID))
                 .ForMember(nameof(Models.Entities.RoomsRoom.PrevIdSpecified), opt => opt.MapFrom(n => n.PREVIDSpecified))
                 .ForMember(nameof(Models.Entities.RoomsRoom.NextId), opt => opt.MapFrom(n => n.NEXTID))
                 .ForMember(nameof(Models.Entities.RoomsRoom.NextIdSpecified), opt => opt.MapFrom(n => n.NEXTIDSpecified))
                 .ForMember(nameof(Models.Entities.RoomsRoom.UpdateDate), opt => opt.MapFrom(n => n.UPDATEDATE))
                 .ForMember(nameof(Models.Entities.RoomsRoom.StartDate), opt => opt.MapFrom(n => n.STARTDATE))
                 .ForMember(nameof(Models.Entities.RoomsRoom.EndDate), opt => opt.MapFrom(n => n.ENDDATE))
                 .ForMember(nameof(Models.Entities.RoomsRoom.IsActual), opt => opt.MapFrom(n => n.ISACTUAL))
                 .ForMember(nameof(Models.Entities.RoomsRoom.IsActive), opt => opt.MapFrom(n => n.ISACTIVE));

            CreateMap<Models.Entities.RoomTypesRoomType, Models.Dto.ROOMTYPE>().ReverseMap()
                 .ForMember(nameof(Models.Entities.RoomTypesRoomType.Id), opt => opt.MapFrom(n => n.ID))
                 .ForMember(nameof(Models.Entities.RoomTypesRoomType.Name), opt => opt.MapFrom(n => n.NAME))
                 .ForMember(nameof(Models.Entities.RoomTypesRoomType.ShortName), opt => opt.MapFrom(n => n.SHORTNAME))
                 .ForMember(nameof(Models.Entities.RoomTypesRoomType.Desc), opt => opt.MapFrom(n => n.DESC))
                 .ForMember(nameof(Models.Entities.RoomTypesRoomType.UpdateDate), opt => opt.MapFrom(n => n.UPDATEDATE))
                 .ForMember(nameof(Models.Entities.RoomTypesRoomType.StartDate), opt => opt.MapFrom(n => n.STARTDATE))
                 .ForMember(nameof(Models.Entities.RoomTypesRoomType.EndDate), opt => opt.MapFrom(n => n.ENDDATE))
                 .ForMember(nameof(Models.Entities.RoomTypesRoomType.IsActive), opt => opt.MapFrom(n => n.ISACTIVE));

            CreateMap<Models.Entities.SteadsStead, Models.Dto.STEAD>().ReverseMap()
                 .ForMember(nameof(Models.Entities.SteadsStead.Id), opt => opt.MapFrom(n => n.ID))
                 .ForMember(nameof(Models.Entities.SteadsStead.ObjectId), opt => opt.MapFrom(n => n.OBJECTID))
                 .ForMember(nameof(Models.Entities.SteadsStead.ObjectGuid), opt => opt.MapFrom(n => n.OBJECTGUID))
                 .ForMember(nameof(Models.Entities.SteadsStead.ChangeId), opt => opt.MapFrom(n => n.CHANGEID))
                 .ForMember(nameof(Models.Entities.SteadsStead.Number), opt => opt.MapFrom(n => n.NUMBER))
                 .ForMember(nameof(Models.Entities.SteadsStead.OperTypeId), opt => opt.MapFrom(n => n.OPERTYPEID))
                 .ForMember(nameof(Models.Entities.SteadsStead.PrevId), opt => opt.MapFrom(n => n.PREVID))
                 .ForMember(nameof(Models.Entities.SteadsStead.NextId), opt => opt.MapFrom(n => n.NEXTID))
                 .ForMember(nameof(Models.Entities.SteadsStead.UpdateDate), opt => opt.MapFrom(n => n.UPDATEDATE))
                 .ForMember(nameof(Models.Entities.SteadsStead.StartDate), opt => opt.MapFrom(n => n.STARTDATE))
                 .ForMember(nameof(Models.Entities.SteadsStead.EndDate), opt => opt.MapFrom(n => n.ENDDATE))
                 .ForMember(nameof(Models.Entities.SteadsStead.IsActual), opt => opt.MapFrom(n => n.ISACTUAL))
                 .ForMember(nameof(Models.Entities.SteadsStead.IsActive), opt => opt.MapFrom(n => n.ISACTIVE));                 
        }
    }
}
